'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _listing = require('./listing');

var _mapping = require('./mapping');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var reFwdSep = /\//g;
var rsSysSep = _lodash2.default.escapeRegExp(_path2.default.sep);
var normalize = function normalize(string) {
  return string.replace(reFwdSep, rsSysSep);
};

var reLodashRes = RegExp(normalize('lodash(?:/(?!fp/)|-amd/|-es/|\\.\\w+/)'));
var reExplicitReq = RegExp('^lodash(?:/|-amd/|-es/|\\.\\w+/)\\w+$');

var lodashRoot = _path2.default.dirname(require.resolve('lodash'));

function getPatterns(options) {
  var result = [];
  _lodash2.default.forOwn(_mapping.features, function (pairs, key) {
    if (!options[key]) {
      result.push.apply(result, _toConsumableArray(pairs));
    }
  });
  return result;
}

/*----------------------------------------------------------------------------*/

var LodashModuleReplacementPlugin = function () {
  function LodashModuleReplacementPlugin(options) {
    _classCallCheck(this, LodashModuleReplacementPlugin);

    this.matches = [];
    this.options = _lodash2.default.assign({}, options);
    this.patterns = getPatterns(this.options);
  }

  _createClass(LodashModuleReplacementPlugin, [{
    key: 'apply',
    value: function apply(compiler) {
      var _this = this;

      var resolvePath = _lodash2.default.memoize(function (_ref) {
        var rawRequest = _ref.rawRequest,
            resource = _ref.resource;

        var result = resource;
        if (!reLodashRes.test(resource)) {
          return result;
        }
        var isExplicit = reExplicitReq.test(rawRequest);
        var resName = _path2.default.basename(resource, '.js');
        var resRoot = _path2.default.dirname(resource);

        if (isExplicit) {
          // Apply any feature set overrides for explicitly requested modules.
          var override = _mapping.overrides[_path2.default.basename(rawRequest, '.js')];
          if (!_lodash2.default.isMatch(_this.options, override)) {
            _this.patterns = getPatterns(_lodash2.default.assign(_this.options, override));
          }
        }
        _lodash2.default.each(_this.patterns, function (pair) {
          // Replace matches as long as they aren't explicit requests for stubbed modules.
          var isStubbed = _lodash2.default.includes(_listing.stubs, pair[1]);
          if (resName != pair[0] || isExplicit && isStubbed) {
            return;
          }
          var moduleFilename = `${ pair[1] }.js`;
          var modulePath = _path2.default.join(resRoot, moduleFilename);
          var exists = _fs2.default.existsSync(modulePath);

          if (isStubbed && !exists) {
            exists = true;
            modulePath = _path2.default.join(lodashRoot, moduleFilename);
          }
          if (exists) {
            result = modulePath;
            _this.matches.push([resource, result]);
            return false;
          }
        });
        return result;
      }, function (_ref2) {
        var resource = _ref2.resource;
        return resource;
      });

      compiler.plugin('normal-module-factory', function (nmf) {
        nmf.plugin('after-resolve', function (data, callback) {
          if (data) {
            data.resource = resolvePath(data);
            return callback(null, data);
          }
          return callback();
        });
      });
    }
  }]);

  return LodashModuleReplacementPlugin;
}();

exports.default = LodashModuleReplacementPlugin;
;
module.exports = exports['default'];